/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Encounter;

import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;
import model.VitalHistory;
import model.VitalSigns;

/**
 *
 * @author Rishab
 */
public class DoctorJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorJPanel
     */
    PersonDirectory detailsHistory;
    PatientDirectory patientDirectory;
    ArrayList<Patient> patientList;
    VitalHistory vitalHistory;
    static String userRole;
    static String userName;
    static int userId;

    /**
     * Creates new form DoctorForm
     *
     * @param detailsHistory
     */
    public DoctorJPanel(PersonDirectory detailsHistory, PatientDirectory patientList, String doctorName, String userRole, int doctorId) {
        initComponents();
        this.detailsHistory = detailsHistory;
        this.patientDirectory = patientList;//check this in other one
        this.patientList = filterPatientByDoctor(userName, userRole, patientList.getPatientList());
        vitalHistory = new VitalHistory();
        //this.patientList=detailsHistory.getPersonHistory();
        displayProduct();
        populatePatientTable();
        this.userRole = userRole;
        this.userName = doctorName;
        this.userId = doctorId;
    }

    private ArrayList<Patient> filterPatientByDoctor(String doctorName, String userRole, ArrayList<Patient> patientList) {
        ArrayList<Patient> newPatientList = new ArrayList<Patient>();
        if (userRole == "Doctor") {
            for (Patient pa : patientList) {
                if (pa.getDoctorName().equals(doctorName)) {
                    newPatientList.add(pa);

                }
            }
            return newPatientList;
        }
        return patientList;
    }

    private void displayProduct() {
        DefaultTableModel model = (DefaultTableModel) tblPatientInfo.getModel();

        model.setRowCount(0);

        for (Person ed : detailsHistory.getHistory()) {

            Object[] row = new Object[9];
            row[0] = ed;
            row[1] = ed.getName();
            row[2] = ed.getPhone();
            //row[3]=ed.getEmail();
            //row[4]=ed.getStartDate();
            //row[4]=;
            //row[5]=ed.getTeamInfo();
            //row[6]=ed.getPositionTitle();
            //row[7]=ed.getCellPhoneno();
            //row[8]=ed.getEmail();

            model.addRow(row);
        }
    }

    private void populatePatientTable() {
        DefaultTableModel model = (DefaultTableModel) tblPatientInfo.getModel();
        model.setRowCount(0);

        for (Patient pa : patientList) {
            Object[] row = new Object[7];
            row[0] = pa;
            row[1] = pa.getAge();
            row[2] = pa.getHouse();
            row[3] = pa.getDoctorName();
            model.addRow(row);

        }
    }

    private void populateEncounterTable(int patientId) {

        DefaultTableModel model = (DefaultTableModel) tableEncounter.getModel();
        model.setRowCount(0);

        for (Patient pat : patientList) {
            if (patientId == pat.getPatientId()) {
                ArrayList<Encounter> pa;
                pa = pat.getEncounterHistory();
                for (Encounter et : pa) {
                    Object[] row = new Object[6];
                    row[0] = et.getBloodSugar();
                    row[1] = et.getBloodPressue();
                    row[2] = et.getTemperature();
                    row[3] = et.getPulse();
                    row[4] = et.isAbnormal();
                    row[5] = et.getUpdateTime();

                    model.addRow(row);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        penelVitalSigns = new javax.swing.JPanel();
        labelVitalSigns = new javax.swing.JLabel();
        labelBloodSugar = new javax.swing.JLabel();
        labelPressure = new javax.swing.JLabel();
        labelTemperature = new javax.swing.JLabel();
        labelPulse = new javax.swing.JLabel();
        textTemperature = new javax.swing.JTextField();
        textBloodSugar = new javax.swing.JTextField();
        textPressure = new javax.swing.JTextField();
        textPulse = new javax.swing.JTextField();
        lablId = new javax.swing.JLabel();
        textName = new javax.swing.JTextField();
        buttonSave = new javax.swing.JButton();
        labelAbnormal = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatientInfo = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableEncounter = new javax.swing.JTable();
        buttonRefresh = new javax.swing.JButton();
        buttonEdit = new javax.swing.JButton();
        buttonAddVitals = new javax.swing.JButton();

        setBackground(new java.awt.Color(51, 153, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        penelVitalSigns.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelVitalSigns.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        labelVitalSigns.setForeground(new java.awt.Color(0, 51, 51));
        labelVitalSigns.setText("Vital Signs");
        penelVitalSigns.add(labelVitalSigns, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, -1, -1));

        labelBloodSugar.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        labelBloodSugar.setText("Blood Sugar");
        penelVitalSigns.add(labelBloodSugar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, -1, 26));

        labelPressure.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        labelPressure.setText("Pressure");
        penelVitalSigns.add(labelPressure, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, -1, -1));

        labelTemperature.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        labelTemperature.setText("Temperature");
        penelVitalSigns.add(labelTemperature, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, -1, -1));

        labelPulse.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        labelPulse.setText("Pulse Rate");
        penelVitalSigns.add(labelPulse, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, -1, 30));
        penelVitalSigns.add(textTemperature, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 235, 126, 27));
        penelVitalSigns.add(textBloodSugar, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 153, 132, -1));
        penelVitalSigns.add(textPressure, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 194, 132, -1));

        textPulse.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textPulseKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textPulseKeyReleased(evt);
            }
        });
        penelVitalSigns.add(textPulse, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 280, 132, -1));

        lablId.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lablId.setText("Patient Name");
        penelVitalSigns.add(lablId, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, -1, -1));
        penelVitalSigns.add(textName, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 109, 132, -1));

        buttonSave.setText("Save");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });
        penelVitalSigns.add(buttonSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 390, 88, -1));

        labelAbnormal.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        labelAbnormal.setText("Abnormal");
        penelVitalSigns.add(labelAbnormal, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 330, -1, -1));

        jRadioButton1.setText("Yes");
        penelVitalSigns.add(jRadioButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 330, -1, -1));

        add(penelVitalSigns, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 50, 350, 420));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Avenir Next", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("               PATIENT SUMMARY");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, 340, 40));

        tblPatientInfo.setAutoCreateRowSorter(true);
        tblPatientInfo.setBackground(new java.awt.Color(242, 242, 242));
        tblPatientInfo.setForeground(new java.awt.Color(0, 51, 51));
        tblPatientInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient Name", "Age", "House", "Doctor Name"
            }
        ));
        tblPatientInfo.setToolTipText("");
        jScrollPane1.setViewportView(tblPatientInfo);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 620, 90));

        tableEncounter.setBackground(new java.awt.Color(242, 242, 242));
        tableEncounter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Blood Sugar", "Pressure", "Temperature", "Pulse Rate", "Abnormal", "Encounter Timestamp"
            }
        ));
        jScrollPane2.setViewportView(tableEncounter);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, 620, 90));

        buttonRefresh.setText("Refresh");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });
        add(buttonRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 240, -1, -1));

        buttonEdit.setText("Edit Vitals");
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });
        add(buttonEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 240, -1, -1));

        buttonAddVitals.setText("Add Vitals");
        buttonAddVitals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddVitalsActionPerformed(evt);
            }
        });
        add(buttonAddVitals, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 240, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        // TODO add your handling code here:

        boolean chckBloodSugar = false;
        boolean chckPressure = false;
        boolean chckTemperature = false;
        boolean chckPulseRate = false;

        chckBloodSugar = textBloodSugar.getText().isEmpty() ? true : false;
        chckPressure = textPressure.getText().isEmpty() ? true : false;
        chckTemperature = textTemperature.getText().isEmpty() ? true : false;
        chckPulseRate = textPulse.getText().isEmpty() ? true : false;

        if ((chckBloodSugar == false) && (chckPressure == false) && (chckTemperature == false) && (chckPulseRate == false)) {
            DefaultTableModel model = (DefaultTableModel) tblPatientInfo.getModel();
            int selectedRowIndex = tblPatientInfo.getSelectedRow();
            if (selectedRowIndex < 0) {
                JOptionPane.showMessageDialog(this, "Please Select a row to add as a Patient");
                return;
            }
            try {
                Patient selectedPatientDetails = (Patient) model.getValueAt(selectedRowIndex, 0);
                Encounter e = selectedPatientDetails.addNewEncounterDetails();
                //VitalSigns v=vitalHistory.addVitals();
                e.setBloodSugar(textBloodSugar.getText());
                e.setBloodPressue(textBloodSugar.getText());
                e.setTemperature(textTemperature.getText());
                e.setPulse(Integer.parseInt(textPulse.getText()));
                //e.setEncounterCount(e.getEncounterCount()+1);
                //e.setEncounter(e);
                e.setAbnormal(jRadioButton1.isSelected());
                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                LocalDateTime now = LocalDateTime.now();
                e.setUpdateTime(dtf.format(now));

                int selectedPatientID = (int) model.getValueAt(selectedRowIndex, 1);
                populateEncounterTable(selectedPatientDetails.getPatientId());
                JOptionPane.showMessageDialog(this, "Vitals for selected patient added");
            } catch (Exception e) {
                System.out.println("Error" + e);
                JOptionPane.showMessageDialog(this, "Please provide correct values");
            }

        }

    }//GEN-LAST:event_buttonSaveActionPerformed

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblPatientInfo.getSelectedRow();
        //    if (selectedRowIndex <0){
        DefaultTableModel model = (DefaultTableModel) tblPatientInfo.getModel();
        int selectedPatientID = (int) model.getValueAt(selectedRowIndex, 1);
        populateEncounterTable(selectedPatientID);
    }//GEN-LAST:event_buttonRefreshActionPerformed

    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel) tableEncounter.getModel();
        for (Patient pat : patientList) {
            // if(patientID==pat.getPatientID()){
            ArrayList<Encounter> pa;
            pa = pat.getEncounterHistory();
            for (Encounter et : pa) {
                textName.setText(String.valueOf(pat.getName()));
                textBloodSugar.setText(String.valueOf(et.getBloodSugar()));
                textPressure.setText(String.valueOf(et.getBloodPressue()));
                textTemperature.setText(String.valueOf(et.getTemperature()));
                textPulse.setText(String.valueOf(et.getPulse()));
            }
        }
    }//GEN-LAST:event_buttonEditActionPerformed

    private void buttonAddVitalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddVitalsActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblPatientInfo.getModel();
        int selectedRowIndex = tblPatientInfo.getSelectedRow();
        Patient selectedPatientDetails = (Patient) model.getValueAt(selectedRowIndex, 0);
        textName.setText(String.valueOf(selectedPatientDetails));;

    }//GEN-LAST:event_buttonAddVitalsActionPerformed

    private void textPulseKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textPulseKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_textPulseKeyReleased

    private void textPulseKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textPulseKeyPressed
        // TODO add your handling code here:
           char value = evt.getKeyChar();
        if((!Character.isDigit(value))){
            evt.consume();
        }
    }//GEN-LAST:event_textPulseKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAddVitals;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonRefresh;
    private javax.swing.JButton buttonSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelAbnormal;
    private javax.swing.JLabel labelBloodSugar;
    private javax.swing.JLabel labelPressure;
    private javax.swing.JLabel labelPulse;
    private javax.swing.JLabel labelTemperature;
    private javax.swing.JLabel labelVitalSigns;
    private javax.swing.JLabel lablId;
    private javax.swing.JPanel penelVitalSigns;
    private javax.swing.JTable tableEncounter;
    private javax.swing.JTable tblPatientInfo;
    private javax.swing.JTextField textBloodSugar;
    private javax.swing.JTextField textName;
    private javax.swing.JTextField textPressure;
    private javax.swing.JTextField textPulse;
    private javax.swing.JTextField textTemperature;
    // End of variables declaration//GEN-END:variables

}
