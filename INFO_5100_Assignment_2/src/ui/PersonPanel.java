/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.PersonDirectory;
import model.CommunityHistory;
import model.PatientDirectory;
import model.HospitalDirectory;
import model.Community;
import model.Hospital;
import model.House;
import model.Patient;
import model.Person;

/**
 *
 * @author Rishab Agarwal
 */
public class PersonPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorPanel
     *
     */
    PersonDirectory personDirectory;
    CommunityHistory communityHistory;
    PatientDirectory patientDirectory;
    HospitalDirectory hospitalDirectory;
    private ArrayList<Hospital> hospitalList = new ArrayList();
    
    private CommunityHistory comm;

    private ArrayList<Community> cList;
    private HashSet<String> cityList;

    private ArrayList<String> communityNameList;
    private ArrayList<String> houseList;

    private HashMap<String, ArrayList<String>> map;
    private HashMap<String, ArrayList<String>> mapHouse;
    static String userRole;
    
    

    public PersonPanel(PersonDirectory person, CommunityHistory communityHistory, PatientDirectory patientDirectory, HospitalDirectory hospitalDirectory, String userRole) {
        initComponents();
        this.personDirectory = person;
        this.patientDirectory = patientDirectory;
        this.communityHistory = communityHistory;
        this.hospitalDirectory = hospitalDirectory;
        
        
          this.cList = new ArrayList<>();
       // this.personDirectory = personDirectory;
        //this.patientDirectory = patientDirectory;
        //this.comm = comm;
        cityList = new HashSet<>();
        communityNameList = new ArrayList<>();
        houseList = new ArrayList<>();
        map = new HashMap<>();
        mapHouse = new HashMap<>();
        this.userRole = userRole;
        cList = communityHistory.getCommunityHistory();
        for (Community community : cList) {

            cityList.add(community.getCity().getcityName());
            communityNameList.add(community.getCommunityName());
//            houseList.add(community.getHouse().getAddress());
        }

        comboCity.addItem("Select a city");

        for (String city : cityList) {
            comboCity.addItem(city);
           

        }

        setCommunityAllProperties();
        validateUserRoles();
        
        

    }
    
    public void validateUserRoles() {
        System.out.println("the user role" + userRole);
        if (userRole == "Patient") {
            personTabs.remove(createPersonPanel);
            buttonDeletePerson.setVisible(false);
        } else if (userRole == "Hospital Admin") {
            buttonDeletePerson.setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        personTabs = new javax.swing.JTabbedPane();
        createPersonPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        personName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        personId = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        personAge = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        personGender = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        personPhone = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        comboCity = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        comboCommunity = new javax.swing.JComboBox<>();
        houseAddress = new javax.swing.JTextField();
        viewPersonPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        personTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        personNameUpdate = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        personAgeUpdate = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        personGenderUpdate = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        personPhoneUpdate = new javax.swing.JTextField();
        personUpdateButton = new javax.swing.JButton();
        communityComboUpdate = new javax.swing.JComboBox<>();
        cityComboUpdate = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        jLabel18 = new javax.swing.JLabel();
        editHouseAddress = new javax.swing.JTextField();
        buttonViewPerson = new javax.swing.JButton();
        buttonDeletePerson = new javax.swing.JButton();
        addPatient = new javax.swing.JButton();

        personTabs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                personTabsMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel1.setText("MANAGE PERSON");

        jLabel2.setText("NAME");

        personName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                personNameKeyPressed(evt);
            }
        });

        jLabel3.setText("ID");

        personId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personIdActionPerformed(evt);
            }
        });
        personId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                personIdKeyPressed(evt);
            }
        });

        jLabel4.setText("AGE");

        personAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personAgeActionPerformed(evt);
            }
        });
        personAge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                personAgeKeyPressed(evt);
            }
        });

        jLabel5.setText("GENDER");

        personGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MALE", "FEMALE" }));

        jLabel6.setText("HOUSE");

        jLabel7.setText("PHONE");

        personPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personPhoneActionPerformed(evt);
            }
        });

        jButton1.setText("CREATE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel10.setText("CITY");

        comboCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCityActionPerformed(evt);
            }
        });
        comboCity.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                comboCityPropertyChange(evt);
            }
        });

        jLabel15.setText("COMMUNITY");

        comboCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCommunityActionPerformed(evt);
            }
        });

        houseAddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                houseAddressKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout createPersonPanelLayout = new javax.swing.GroupLayout(createPersonPanel);
        createPersonPanel.setLayout(createPersonPanelLayout);
        createPersonPanelLayout.setHorizontalGroup(
            createPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createPersonPanelLayout.createSequentialGroup()
                .addGroup(createPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(createPersonPanelLayout.createSequentialGroup()
                            .addGap(299, 299, 299)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(createPersonPanelLayout.createSequentialGroup()
                            .addGap(233, 233, 233)
                            .addGroup(createPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6)
                                .addComponent(jLabel7)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3)
                                .addComponent(jLabel10)
                                .addComponent(jLabel15))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                            .addGroup(createPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(personName)
                                .addComponent(personId)
                                .addComponent(personAge)
                                .addComponent(personGender, 0, 241, Short.MAX_VALUE)
                                .addComponent(personPhone)
                                .addComponent(comboCity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(comboCommunity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(houseAddress))))
                    .addGroup(createPersonPanelLayout.createSequentialGroup()
                        .addGap(348, 348, 348)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(514, Short.MAX_VALUE))
        );
        createPersonPanelLayout.setVerticalGroup(
            createPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createPersonPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(66, 66, 66)
                .addGroup(createPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(personId, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(createPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(personName, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(createPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(personAge, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(createPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(personGender, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(createPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(comboCity, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(createPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createPersonPanelLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel15))
                    .addGroup(createPersonPanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(comboCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(38, 38, 38)
                .addGroup(createPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(houseAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(createPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(personPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(122, Short.MAX_VALUE))
        );

        personTabs.addTab("CREATE", createPersonPanel);

        personTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Id", "Age", "Gender", "Phone", "City", "Community", "House"
            }
        ));
        jScrollPane1.setViewportView(personTable);

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel8.setText("UPDATE PERSON");

        jLabel9.setText("NAME");

        jLabel11.setText("AGE");

        personAgeUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personAgeUpdateActionPerformed(evt);
            }
        });

        jLabel12.setText("GENDER");

        personGenderUpdate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MALE", "FEMALE" }));

        jLabel13.setText("CITY");

        jLabel14.setText("PHONE");

        personPhoneUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personPhoneUpdateActionPerformed(evt);
            }
        });

        personUpdateButton.setText("UPDATE");
        personUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personUpdateButtonActionPerformed(evt);
            }
        });

        communityComboUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityComboUpdateActionPerformed(evt);
            }
        });
        communityComboUpdate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                communityComboUpdatePropertyChange(evt);
            }
        });

        cityComboUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboUpdateActionPerformed(evt);
            }
        });
        cityComboUpdate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cityComboUpdatePropertyChange(evt);
            }
        });

        jLabel16.setText("COMMUNITY");

        jLabel17.setText("HOUSE");

        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Name", "Doctor"
            }
        ));
        jScrollPane2.setViewportView(patientTable);

        jLabel18.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel18.setText("PATIENTS");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(personAgeUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(personNameUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(personGenderUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel13)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cityComboUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(communityComboUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel14)
                                .addComponent(jLabel17))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addComponent(personUpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(personPhoneUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                                .addComponent(editHouseAddress))))
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 689, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(218, 218, 218))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(personNameUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(personAgeUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(personGenderUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cityComboUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addGap(25, 25, 25)
                        .addComponent(jLabel16)
                        .addGap(153, 153, 153))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel18)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(communityComboUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel17)
                                        .addGap(34, 34, 34))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(editHouseAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)))
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(personPhoneUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(personUpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(87, 87, 87))))))
        );

        buttonViewPerson.setText("VIew");
        buttonViewPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonViewPersonActionPerformed(evt);
            }
        });

        buttonDeletePerson.setText("Delete");
        buttonDeletePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeletePersonActionPerformed(evt);
            }
        });

        addPatient.setText("Add Patient");
        addPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPatientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout viewPersonPanelLayout = new javax.swing.GroupLayout(viewPersonPanel);
        viewPersonPanel.setLayout(viewPersonPanelLayout);
        viewPersonPanelLayout.setHorizontalGroup(
            viewPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewPersonPanelLayout.createSequentialGroup()
                .addGap(259, 259, 259)
                .addComponent(buttonViewPerson)
                .addGap(124, 124, 124)
                .addComponent(buttonDeletePerson)
                .addGap(136, 136, 136)
                .addComponent(addPatient)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(viewPersonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(viewPersonPanelLayout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 3, Short.MAX_VALUE)))
                .addContainerGap())
        );
        viewPersonPanelLayout.setVerticalGroup(
            viewPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewPersonPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(viewPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonViewPerson)
                        .addComponent(buttonDeletePerson)))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 428, Short.MAX_VALUE))
        );

        personTabs.addTab("VIEW", viewPersonPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(personTabs)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(personTabs)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void personIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_personIdActionPerformed

    private void personAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personAgeActionPerformed
//         TODO add your handling code here:
    }//GEN-LAST:event_personAgeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:    
        boolean chckId = false;
        boolean chckName = false;
        boolean chckAge = false;
        boolean chckHouse = false;
        boolean chckPhone = false;

        chckId = personId.getText().isEmpty() ? true : false;
        chckName = personName.getText().isEmpty() ? true : false;
        chckAge = personAge.getText().isEmpty() ? true : false;
        chckHouse = houseAddress.getText().isEmpty() ? true : false;
        chckPhone = personPhone.getText().isEmpty() ? true : false;
        
        if ((chckId == false) && (chckName == false) && (chckAge == false) && (chckHouse == false) && (chckPhone == false)) {
        String name = personName.getText();
        int phone = Integer.parseInt(personPhone.getText());
        int id = Integer.parseInt(personId.getText());
        String gender = personGender.getSelectedItem().toString();
        int age = Integer.parseInt(personAge.getText());
        String house = houseAddress.getText();
        String city = comboCity.getSelectedItem().toString();
        String community = comboCommunity.getSelectedItem().toString();
        Person em = personDirectory.addNewPerson();
        em.setAge(age);
        em.setGender(gender);
        em.setHouse(new House(house));
        em.setCity(new City(city));
        em.setCommunity(new Community(community));
        em.setId(id);
        em.setName(name);
        em.setPhone(phone);
        JOptionPane.showMessageDialog(this, "Person Information Saved");
        personName.setText("");
        personPhone.setText("");
        personId.setText("");
        personAge.setText("");
        //System.out.println(personDirectory.getHistory());
        }
         else{
             JOptionPane.showMessageDialog(this, "Please provide correct values!");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void personTabsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_personTabsMouseClicked
        // TODO add your handling code here:

        System.out.println("here i am");
        displayPersons();
    }//GEN-LAST:event_personTabsMouseClicked

    private void personPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personPhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_personPhoneActionPerformed

    private void personAgeUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personAgeUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_personAgeUpdateActionPerformed

    private void personPhoneUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personPhoneUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_personPhoneUpdateActionPerformed

    private void personUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personUpdateButtonActionPerformed
        // TODO add your handling code here:
   
        boolean chckName = false;
        boolean chckAge = false;
        boolean chckHouse = false;
        boolean chckPhone = false;

      
        chckName = personNameUpdate.getText().isEmpty() ? true : false;
        chckAge = personAgeUpdate.getText().isEmpty() ? true : false;
        chckHouse = editHouseAddress.getText().isEmpty() ? true : false;
        chckPhone = personPhoneUpdate.getText().isEmpty() ? true : false;
        
        if ((chckName == false) && (chckAge == false) && (chckHouse == false) && (chckPhone == false)) {

        int selectedRowIndex = personTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "please select the row to Update");
            return;
        }
        
        try{
        DefaultTableModel model = (DefaultTableModel) personTable.getModel();
        Person selectedPerson = (Person) model.getValueAt(selectedRowIndex, 0);

        String name = personNameUpdate.getText();
        int phone = Integer.parseInt(personPhoneUpdate.getText());
        String gender = personGenderUpdate.getSelectedItem().toString();
        int age = Integer.parseInt(personAgeUpdate.getText());
        String house = editHouseAddress.getText().toString();
        String city = cityComboUpdate.getSelectedItem().toString();
        String community = communityComboUpdate.getSelectedItem().toString();
        Person em = personDirectory.addNewPerson();
        selectedPerson.setAge(age);
        selectedPerson.setGender(gender);
        selectedPerson.setHouse(new House(house));
        selectedPerson.setCity(new City(city));
        selectedPerson.setCommunity(new Community(community));
        selectedPerson.setName(name);
        selectedPerson.setPhone(phone);
        JOptionPane.showMessageDialog(this, "Person Information Updated");
        personNameUpdate.setText("");
        personPhoneUpdate.setText("");
        personAgeUpdate.setText("");
        editHouseAddress.setText("");
        cityComboUpdate.setSelectedItem("");
        communityComboUpdate.setSelectedItem("");
        displayPersons();
        }
        
        catch (Exception e) {
                System.out.println("Error" + e);
                JOptionPane.showMessageDialog(this, "Please fill the empty values");
            }
        }
        else{
             JOptionPane.showMessageDialog(this, "Please provide correct values!");
        }

    }//GEN-LAST:event_personUpdateButtonActionPerformed

    private void buttonViewPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonViewPersonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = personTable.getSelectedRow(); // Get the selected row index from the table
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select the row to view");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) personTable.getModel();
        Person selectedPerson = (Person) model.getValueAt(selectedRowIndex, 0);
          cityComboUpdate.addItem("Select a city");

            for (String city : cityList) {
                cityComboUpdate.addItem(city);

            }

            setCommunityAllProperties();
        

        cityComboUpdate.setSelectedItem(selectedPerson.getCity().getcityName());
        communityComboUpdate.setSelectedItem(selectedPerson.getCommunity().getCommunityName());
//        houseComboUpdate.setSelectedItem(selectedPerson.getHouse().getAddress());
        editHouseAddress.setText(selectedPerson.getHouse().getAddress());
        personNameUpdate.setText(selectedPerson.getName());
        personAgeUpdate.setText(String.valueOf(selectedPerson.getAge()));
        personPhoneUpdate.setText(String.valueOf(selectedPerson.getPhone()));
        personGenderUpdate.setSelectedItem(selectedPerson.getGender());
        
//        cityComboUpdate.setSelectedItem(selectedPerson.getCity().getcityName());
//        cityUpdateAction(selectedPerson.getCity().getcityName());

//        communityUpdateAction(selectedPerson.getCommunity().getCommunityName());
        communityComboUpdate.setSelectedItem(selectedPerson.getCommunity().getCommunityName());
//        houseComboUpdate.setSelectedItem(selectedPerson.getHouse().getAddress());
        //personAddressUpdate.setText(selectedPerson.getHouse().getAddress());
    }//GEN-LAST:event_buttonViewPersonActionPerformed

    private void buttonDeletePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeletePersonActionPerformed
        // TODO add your handling code here:

        int selectedRowIndex = personTable.getSelectedRow(); // Get the selected row index from the table
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select the row to view");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) personTable.getModel();
        Person selectedPerson = (Person) model.getValueAt(selectedRowIndex, 0);
        personDirectory.deletePerson(selectedPerson);
        JOptionPane.showMessageDialog(this, "This Person record has been deleted");
        personName.setText("");
        personPhone.setText("");
        personId.setText("");
        personAge.setText("");
        //personAddress.setText("");
        displayPersons();
    }//GEN-LAST:event_buttonDeletePersonActionPerformed

    private void comboCityPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_comboCityPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_comboCityPropertyChange

    private void comboCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCityActionPerformed
        // TODO add your handling code here:
        for (Map.Entry<String, ArrayList<String>> entry : map.entrySet()) {

            if (comboCity.getSelectedItem() != null) {

                if (comboCity.getSelectedItem().equals(entry.getKey())) {
                    ArrayList<String> list = entry.getValue();
                    comboCommunity.removeAllItems();

                    for (String community : list) {
                        //     comboCommunity.removeAllItems();
                        comboCommunity.addItem(community);
                    }

                }

            }

        }
        
        
        

    }//GEN-LAST:event_comboCityActionPerformed

    private void comboCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCommunityActionPerformed
        // TODO add your handling code here:
//        System.out.println("communuity create  ca;lled");
//        if (comboCommunity.getSelectedItem() != null) {
//            communityUpdateAction(comboCommunity.getSelectedItem().toString(), "new");
//        }
    }//GEN-LAST:event_comboCommunityActionPerformed

    private void cityUpdateAction(String selectedCity, String type) {

        if (selectedCity.equals("Boston")) {
            if (type.equals("new")) {
                comboCommunity.removeAllItems();
                comboCommunity.addItem("Huntington Avenue");
                comboCommunity.addItem("Brookline");
            } else {
                communityComboUpdate.removeAllItems();
                communityComboUpdate.addItem("Huntington Avenue");
                communityComboUpdate.addItem("Brookline");

            }

        }
        if (selectedCity.equals("New York")) {
            if (type.equals("new")) {
                comboCommunity.removeAllItems();
                comboCommunity.addItem("Times Square");
                comboCommunity.addItem("Manhattan");

            } else {
                communityComboUpdate.removeAllItems();
                communityComboUpdate.addItem("Times Square");
                communityComboUpdate.addItem("Manhattan");

            }

        }

    }
//    private void clearAllTextFields() {
//        txtPerName.setText("");
//        txtPerAge.setText("");
//        txtPerId.setText("");
//        txtPerMobile.setText("");
//        ComboPerGender.setSelectedIndex(0);
//
//        //txtPerAddress.setText("");
//    }

    private void communityComboUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityComboUpdateActionPerformed
        // TODO add your handling code here:
        System.out.println("communuity update update ca;lled");
        if (communityComboUpdate.getSelectedItem() != null) {
//            communityUpdateAction(communityComboUpdate.getSelectedItem().toString(), "update");
        }
    }//GEN-LAST:event_communityComboUpdateActionPerformed

    private void communityComboUpdatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_communityComboUpdatePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_communityComboUpdatePropertyChange

    private void cityComboUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboUpdateActionPerformed
        // TODO add your handling code here:
//        System.out.println("city create update ca;lled");
//        String selectedCity = cityComboUpdate.getSelectedItem().toString();
//        cityUpdateAction(selectedCity, "update");
        for (Map.Entry<String, ArrayList<String>> entry : map.entrySet()) {

            if (cityComboUpdate.getSelectedItem() != null) {

                if (cityComboUpdate.getSelectedItem().equals(entry.getKey())) {
                    ArrayList<String> list = entry.getValue();
                    communityComboUpdate.removeAllItems();

                    for (String community : list) {
                        //     comboCommunity.removeAllItems();
                        communityComboUpdate.addItem(community);
                    }

                }

            }

        }
    }//GEN-LAST:event_cityComboUpdateActionPerformed

    private void cityComboUpdatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cityComboUpdatePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_cityComboUpdatePropertyChange

    private void addPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPatientActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = personTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please Select a row to add as a Patient");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) personTable.getModel();
        Person selectedPersonDetails = (Person) model.getValueAt(selectedRowIndex, 0);
        String patientName = selectedPersonDetails.getName();
        int patientId = selectedPersonDetails.getId();
        String community = selectedPersonDetails.getCommunity().getCommunityName();
        String doctor = getPatientCommunityDoctor(community);
        if (doctor == null) {
            JOptionPane.showMessageDialog(this, "Person cannot be added as patient as doctor doesnot exist for this community");
            return;
        } else {
           Patient pa = patientDirectory.addPatient();
           pa.setName(patientName);
           pa.setId(patientId);
           pa.setDoctorName(doctor);
           pa.setAge(selectedPersonDetails.getAge());
           pa.setCity(new City(selectedPersonDetails.getCity().getcityName()));
           pa.setCommunity(new Community(selectedPersonDetails.getCommunity().getCommunityName()));
           pa.setPhone(selectedPersonDetails.getPhone());
           pa.setHouse(new House(selectedPersonDetails.getHouse().getAddress()));
          
        }
        
        displayPatients();
    }//GEN-LAST:event_addPatientActionPerformed

    private void personIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_personIdKeyPressed
        // TODO add your handling code here:
           char value = evt.getKeyChar();
        if((!Character.isDigit(value))){
            evt.consume();
        }
    }//GEN-LAST:event_personIdKeyPressed

    private void personNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_personNameKeyPressed
        // TODO add your handling code here:
           char value = evt.getKeyChar();
        if((!Character.isAlphabetic(value))){
            evt.consume();
        }
    }//GEN-LAST:event_personNameKeyPressed

    private void personAgeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_personAgeKeyPressed
        // TODO add your handling code here:
           char value = evt.getKeyChar();
        if((!Character.isDigit(value))){
            evt.consume();
        }
    }//GEN-LAST:event_personAgeKeyPressed

    private void houseAddressKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_houseAddressKeyPressed
        // TODO add your handling code here:
            char value = evt.getKeyChar();
        if((!Character.isAlphabetic(value))){
            evt.consume();
        }
    }//GEN-LAST:event_houseAddressKeyPressed

    private String getPatientCommunityDoctor(String community) {
        String docName = null;
        hospitalList = hospitalDirectory.getHospitalList();
        for (Hospital hos : hospitalList) {
            if (hos.getCommunity().getCommunityName().equals(community)) {
                docName = hos.getDoctorName();
            }
        }
        return docName;
    }
    private void displayPersons() {
        System.out.println("display employees");
        DefaultTableModel model = (DefaultTableModel) personTable.getModel();
        model.setRowCount(0);
        System.out.println("history" + personDirectory.getHistory().toString());
        for (Person em : personDirectory.getHistory()) {
            Object[] row = new Object[8];
            System.out.println("abc" + em.getName());
            row[0] = em;
            row[1] = em.getId();
            row[2] = em.getAge();
            row[3] = em.getGender();
            row[4] = em.getPhone();
            row[5] = em.getCity().getcityName();
            row[6] = em.getCommunity().getCommunityName();
            row[7] = em.getHouse();
            model.addRow(row);

        }
//    
    }
     private void displayPatients() {
        DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
        model.setRowCount(0);
        for (Patient em : patientDirectory.getPatientList()) {
            Object[] row = new Object[4];
            row[0] = em;
            row[1] = em.getName();
            row[2] = em.getDoctorName();
            model.addRow(row);

        }
//    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPatient;
    private javax.swing.JButton buttonDeletePerson;
    private javax.swing.JButton buttonViewPerson;
    private javax.swing.JComboBox<String> cityComboUpdate;
    private javax.swing.JComboBox<String> comboCity;
    private javax.swing.JComboBox<String> comboCommunity;
    private javax.swing.JComboBox<String> communityComboUpdate;
    private javax.swing.JPanel createPersonPanel;
    private javax.swing.JTextField editHouseAddress;
    private javax.swing.JTextField houseAddress;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable patientTable;
    private javax.swing.JTextField personAge;
    private javax.swing.JTextField personAgeUpdate;
    private javax.swing.JComboBox<String> personGender;
    private javax.swing.JComboBox<String> personGenderUpdate;
    private javax.swing.JTextField personId;
    private javax.swing.JTextField personName;
    private javax.swing.JTextField personNameUpdate;
    private javax.swing.JTextField personPhone;
    private javax.swing.JTextField personPhoneUpdate;
    private javax.swing.JTable personTable;
    private javax.swing.JTabbedPane personTabs;
    private javax.swing.JButton personUpdateButton;
    private javax.swing.JPanel viewPersonPanel;
    // End of variables declaration//GEN-END:variables

    private void setCommunityAllProperties() {

        for (Community community : cList) {

            ArrayList<String> communityVal = new ArrayList<>();

            if (cityList.contains(community.getCity().getcityName())) {
                if (map.get(community.getCity().getcityName()) == null) {
                    communityVal.add(community.getCommunityName());
                    map.put(community.getCity().getcityName(), communityVal);
                } else {

                    map.get(community.getCity().getcityName()).add(community.getCommunityName());

                }

            }

        }

    }
    
     public void setHouseAllProperties() {

        for (Community community : cList) {

            ArrayList<String> HouseVal = new ArrayList<>();

            if (communityNameList.contains(community.getCommunityName())) {
                if (mapHouse.get(community.getCommunityName()) == null) {
                    HouseVal.add(community.getHouse().getAddress());
                    mapHouse.put(community.getCommunityName(), HouseVal);
                } else {

                    mapHouse.get(community.getCommunityName()).add(community.getHouse().getAddress());

                }

            }

        }
    }
     
     
}
