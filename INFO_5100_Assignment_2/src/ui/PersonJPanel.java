/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Community;
import model.CommunityHistory;
import model.House;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;

/**
 *
 * @author Rishab
 */
public class PersonJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PersonJPanel
     */
    private PersonDirectory personDirectory;
    private CommunityHistory comm;

    private PatientDirectory patientDirectory;

    private boolean isSet = false;
    private ArrayList<Community> cList;
    private HashSet<String> cityList;

    private ArrayList<String> communityNameList;
    private ArrayList<String> houseList;

    private HashMap<String, ArrayList<String>> map;
    private HashMap<String, ArrayList<String>> mapHouse;

    public PersonJPanel(PersonDirectory personDirectory, CommunityHistory comm, PatientDirectory patientDirectory) {
        initComponents();
        this.cList = new ArrayList<>();
        this.personDirectory = personDirectory;
        this.patientDirectory = patientDirectory;
        this.comm = comm;
        cityList = new HashSet<>();
        communityNameList = new ArrayList<>();
        houseList = new ArrayList<>();
        map = new HashMap<>();
        mapHouse = new HashMap<>();

        cList = comm.getCommunityDetails();
        for (Community community : cList) {

            cityList.add(community.getCity().getCityName());
            communityNameList.add(community.getCommunityName());
            houseList.add(community.getHouse().getAddress());
        }

        comboCity.addItem("Select a city");

        for (String city : cityList) {
            comboCity.addItem(city);
           

        }

        setCommunityAllProperties();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PersonTab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        lblPatientName = new javax.swing.JLabel();
        lblPersonId = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        ComboGender = new javax.swing.JComboBox<>();
        txtPersonName = new javax.swing.JTextField();
        txtPersonId = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        lblMobile = new javax.swing.JLabel();
        txtMobile = new javax.swing.JTextField();
        btnCreatePatient = new javax.swing.JButton();
        lblCreatePatient = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        lblCommunity = new javax.swing.JLabel();
        lblHouse = new javax.swing.JLabel();
        comboCity = new javax.swing.JComboBox<>();
        comboCommunity = new javax.swing.JComboBox<>();
        txtHouse = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPersons = new javax.swing.JTable();
        lblPatientName1 = new javax.swing.JLabel();
        lblPersonId1 = new javax.swing.JLabel();
        lblAge1 = new javax.swing.JLabel();
        lblGender1 = new javax.swing.JLabel();
        lblMobile1 = new javax.swing.JLabel();
        txtPerMobile = new javax.swing.JTextField();
        ComboPerGender = new javax.swing.JComboBox<>();
        txtPerAge = new javax.swing.JTextField();
        txtPerId = new javax.swing.JTextField();
        txtPerName = new javax.swing.JTextField();
        btnPersonView = new javax.swing.JButton();
        btnPersonDelete = new javax.swing.JButton();
        btnPersonUpdate = new javax.swing.JButton();
        comboCityUpdate = new javax.swing.JComboBox<>();
        communityComboUpdate = new javax.swing.JComboBox<>();
        lblUpdateCommunity = new javax.swing.JLabel();
        lblUpdateCity1 = new javax.swing.JLabel();
        lblUpdateHouse = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        labelName2 = new javax.swing.JLabel();
        textPatientName = new javax.swing.JTextField();
        labelName1 = new javax.swing.JLabel();
        textPatientId = new javax.swing.JTextField();
        labelName3 = new javax.swing.JLabel();
        textDocName = new javax.swing.JTextField();
        buttonSavePatient = new javax.swing.JButton();
        buttonAddPatient = new javax.swing.JButton();
        txtHouseUpdate = new javax.swing.JTextField();

        PersonTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PersonTabMouseClicked(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(153, 204, 255));

        lblPatientName.setText("Name :");

        lblPersonId.setText("Person Id :");

        lblAge.setText("Age :");

        lblGender.setText("Gender :");

        ComboGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Male", "Female", "Other" }));

        txtPersonName.setText("Rishab");

        txtPersonId.setText("1");
        txtPersonId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPersonIdActionPerformed(evt);
            }
        });

        txtAge.setText("25");

        lblMobile.setText("Mobile No :");

        txtMobile.setText("9822455572");

        btnCreatePatient.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCreatePatient.setText("Create ");
        btnCreatePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatePatientActionPerformed(evt);
            }
        });

        lblCreatePatient.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblCreatePatient.setText("CREATE PATIENT");

        lblCity.setText("City :");

        lblCommunity.setText("Community :");

        lblHouse.setText("House :");

        comboCity.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboCityItemStateChanged(evt);
            }
        });
        comboCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCityActionPerformed(evt);
            }
        });

        comboCommunity.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboCommunityItemStateChanged(evt);
            }
        });
        comboCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCommunityActionPerformed(evt);
            }
        });

        txtHouse.setText("House 1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(212, 212, 212)
                        .addComponent(lblCreatePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblCity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblPatientName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblPersonId, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                                    .addComponent(lblAge, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtPersonName, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                                    .addComponent(txtPersonId)
                                    .addComponent(txtAge)
                                    .addComponent(comboCity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboCommunity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtHouse))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(btnCreatePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblMobile, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                                    .addComponent(lblGender, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ComboGender, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtMobile, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(618, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(lblCreatePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPersonName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPersonId, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPersonId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAge, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMobile, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMobile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(btnCreatePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        PersonTab.addTab("Create", jPanel1);

        tblPersons.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Person ID", "Age", "Gender", "Mobile No", "City", "Community", "House"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPersons);

        lblPatientName1.setText("Name :");

        lblPersonId1.setText("Person Id :");

        lblAge1.setText("Age :");

        lblGender1.setText("Gender :");

        lblMobile1.setText("Mobile No :");

        ComboPerGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Male", "Female", "Other" }));

        txtPerId.setEditable(false);
        txtPerId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPerIdActionPerformed(evt);
            }
        });

        btnPersonView.setText("View");
        btnPersonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPersonViewActionPerformed(evt);
            }
        });

        btnPersonDelete.setText("Delete");
        btnPersonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPersonDeleteActionPerformed(evt);
            }
        });

        btnPersonUpdate.setText("Update");
        btnPersonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPersonUpdateActionPerformed(evt);
            }
        });

        comboCityUpdate.setToolTipText("");
        comboCityUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCityUpdateActionPerformed(evt);
            }
        });

        communityComboUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityComboUpdateActionPerformed(evt);
            }
        });

        lblUpdateCommunity.setText("Community :");

        lblUpdateCity1.setText("City :");

        lblUpdateHouse.setText("House :");

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel1.setText("Add Patient");

        labelName2.setText("Patient Name");

        labelName1.setText("Patient ID");

        textPatientId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textPatientIdKeyTyped(evt);
            }
        });

        labelName3.setText("Doctor Name");

        textDocName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textDocNameKeyTyped(evt);
            }
        });

        buttonSavePatient.setText("Save Patient Info");
        buttonSavePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSavePatientActionPerformed(evt);
            }
        });

        buttonAddPatient.setText("Add Patient");
        buttonAddPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddPatientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1095, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(213, 213, 213)
                        .addComponent(btnPersonView)
                        .addGap(126, 126, 126)
                        .addComponent(btnPersonDelete)
                        .addGap(107, 107, 107)
                        .addComponent(btnPersonUpdate))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblMobile1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPatientName1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPersonId1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblAge1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblGender1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ComboPerGender, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtPerName)
                            .addComponent(txtPerId)
                            .addComponent(txtPerAge)
                            .addComponent(txtPerMobile, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(56, 56, 56)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblUpdateCity1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblUpdateCommunity, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                            .addComponent(lblUpdateHouse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboCityUpdate, 0, 117, Short.MAX_VALUE)
                            .addComponent(communityComboUpdate, 0, 117, Short.MAX_VALUE)
                            .addComponent(txtHouseUpdate))))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(labelName2)
                                .addGap(28, 28, 28)
                                .addComponent(textPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(labelName1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(textPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(labelName3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(textDocName, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(buttonSavePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(buttonAddPatient))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnPersonView)
                            .addComponent(btnPersonDelete)
                            .addComponent(btnPersonUpdate)
                            .addComponent(buttonAddPatient))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPatientName1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUpdateCity1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboCityUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPersonId1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUpdateCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(communityComboUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAge1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPerAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUpdateHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblGender1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ComboPerGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMobile1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPerMobile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelName2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labelName1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtHouseUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(textPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelName3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textDocName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48)
                        .addComponent(buttonSavePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(94, Short.MAX_VALUE))
        );

        PersonTab.addTab("View", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(PersonTab, javax.swing.GroupLayout.PREFERRED_SIZE, 1095, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PersonTab)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtPersonIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPersonIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPersonIdActionPerformed

    private void txtPerIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPerIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPerIdActionPerformed

    private void btnCreatePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatePatientActionPerformed
        // TODO add your handling code here:

        String name = txtPersonName.getText();
        String ageTemp = txtAge.getText();
        String personId = txtPersonId.getText();
        String gender = ComboGender.getSelectedItem().toString();
        String phone = txtMobile.getText();

        String city = comboCity.getSelectedItem().toString();

        String community = comboCommunity.getSelectedItem().toString();
        String house = txtHouse.getText();

        Person p = personDirectory.addPerson();

        p.setName(name);
        p.setPersonId(Integer.parseInt(personId));
        p.setAge(Integer.parseInt(ageTemp));
        p.setMobile(Long.parseLong(phone));
        p.setGender(gender);

        p.setCity(new City(city));
        p.setCommunity(new Community(community));
        p.setHouse(new House(house));

        JOptionPane.showMessageDialog(this, "New Person Created");

        txtPersonName.setText("");
        txtAge.setText("");
        txtPersonId.setText("");

        txtMobile.setText("");
        txtMobile.setText("");
        ComboGender.setSelectedIndex(0);

        //System.out.println(personDirectory.getPersonDetails().toString());

    }//GEN-LAST:event_btnCreatePatientActionPerformed

    private void PersonTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PersonTabMouseClicked

        populatePeopleTable();

        //

    }//GEN-LAST:event_PersonTabMouseClicked

    private void btnPersonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPersonViewActionPerformed
        // TODO add your handling code here:
        int selectRowIndex = tblPersons.getSelectedRow();

        if (selectRowIndex < 0) {
            JOptionPane.showConfirmDialog(this, "Please select a row to view the data");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblPersons.getModel();
        Person selectedPerson = (Person) model.getValueAt(selectRowIndex, 0);

        txtPerName.setText(selectedPerson.getName());
        txtPerId.setText(String.valueOf(selectedPerson.getPersonId()));
        txtPerAge.setText(String.valueOf(selectedPerson.getAge()));

        int index = 0;
        if (selectedPerson.getGender().equalsIgnoreCase("male")) {
            index = 1;
        } else if (selectedPerson.getGender().equalsIgnoreCase("female")) {
            index = 2;
        } else if (selectedPerson.getGender().equalsIgnoreCase("other")) {
            index = 3;
        }

        
            comboCityUpdate.addItem("Select a city");

            for (String city : cityList) {
                comboCityUpdate.addItem(city);

            }

            setCommunityAllProperties();
        

        comboCityUpdate.setSelectedItem(selectedPerson.getCity().getCityName());
        communityComboUpdate.setSelectedItem(selectedPerson.getCommunity().getCommunityName());
//        houseComboUpdate.setSelectedItem(selectedPerson.getHouse().getAddress());
        txtHouseUpdate.setText(selectedPerson.getHouse().getAddress());
    
        ComboPerGender.setSelectedIndex(index);
        txtPerMobile.setText(String.valueOf(selectedPerson.getMobile()));
        //txtPerAddress.setText(selectedPerson.getHouse().getAddress());
    }//GEN-LAST:event_btnPersonViewActionPerformed

    private void btnPersonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPersonDeleteActionPerformed
        // TODO add your handling code here:
        clearAllTextFields();

        int selectRowIndex = tblPersons.getSelectedRow();

        if (selectRowIndex < 0) {
            JOptionPane.showConfirmDialog(this, "Please select a row to delete");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblPersons.getModel();
        Person selectedPerson = (Person) model.getValueAt(selectRowIndex, 0);

        personDirectory.deleteEmployee(selectedPerson);

        JOptionPane.showMessageDialog(null, "Person Deleted!");

        populatePeopleTable();
    }//GEN-LAST:event_btnPersonDeleteActionPerformed

    private void btnPersonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPersonUpdateActionPerformed
        // TODO add your handling code here:
        int selectRowIndex = tblPersons.getSelectedRow();

        if (selectRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row to update");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblPersons.getModel();
        Person selectedPerson = (Person) model.getValueAt(selectRowIndex, 0);

        String name = txtPerName.getText();
        String ageTemp = txtPerAge.getText();
        String personId = txtPerId.getText();
        String gender = ComboPerGender.getSelectedItem().toString();
        String phone = txtPerMobile.getText();

        String city = comboCityUpdate.getSelectedItem().toString();

        String community = communityComboUpdate.getSelectedItem().toString();
        String house = txtHouseUpdate.getText();

        // if (isValid) {
        selectedPerson.setAge(Integer.parseInt(ageTemp));

        //  selectedPerson.setName(name);
        //selectedPerson.setPersonId(Integer.parseInt(personId));
        selectedPerson.setGender(gender);
        selectedPerson.setMobile(Long.parseLong(phone));
        selectedPerson.setCity(new City(city));
        selectedPerson.setCommunity(new Community(community));
        selectedPerson.setHouse(new House(house));

        JOptionPane.showMessageDialog(null, "Person updated");

        populatePeopleTable();

        clearAllTextFields();

        //}

    }//GEN-LAST:event_btnPersonUpdateActionPerformed

    private void comboCityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboCityItemStateChanged


    }//GEN-LAST:event_comboCityItemStateChanged

    private void comboCommunityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboCommunityItemStateChanged

//        for (Map.Entry<String, ArrayList<String>> entry : mapHouse.entrySet()) {
//
//            if (comboCommunity.getSelectedItem().equals(entry.getKey())) {
//                ArrayList<String> list = entry.getValue();
//                comboHouse.removeAllItems();
//                for (String house : list) {
//                    comboHouse.addItem(house);
//
//                }
//
//            }
//        }
    }//GEN-LAST:event_comboCommunityItemStateChanged

    private void comboCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCommunityActionPerformed

        //new code
//          if (comboCommunity.getSelectedItem() != null) {
//            communityUpdateAction(comboCommunity.getSelectedItem().toString(), "new");
//        }
        //new code end
        // setHouseAllProperties();
//        
//        for (Map.Entry<String, ArrayList<String>> entry : mapHouse.entrySet()) {
//
//            if (comboCommunity.getSelectedItem() != null) {
//
//                if (comboCommunity.getSelectedItem().equals(entry.getKey())) {
//                    comboHouse.removeAllItems();
//                    ArrayList<String> list = new ArrayList<>();
//                    list = entry.getValue();
//
//                    for (String house : list) {
//
//                        comboHouse.addItem(house);
//
//                    }
//
//                }
//
//            }
//
//        }

    }//GEN-LAST:event_comboCommunityActionPerformed

    private void comboCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCityActionPerformed

        //new code start
        // String selectedCity = comboCity.getSelectedItem().toString();
        //cityUpdateAction(selectedCity, "new");
        //new code end
        //setCommunityAllProperties();
        for (Map.Entry<String, ArrayList<String>> entry : map.entrySet()) {

            if (comboCity.getSelectedItem() != null) {

                if (comboCity.getSelectedItem().equals(entry.getKey())) {
                    ArrayList<String> list = entry.getValue();
                    comboCommunity.removeAllItems();

                    for (String community : list) {
                        //     comboCommunity.removeAllItems();
                        comboCommunity.addItem(community);
                    }

                }

            }

        }

    }//GEN-LAST:event_comboCityActionPerformed

    private void comboCityUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCityUpdateActionPerformed
        // TODO add your handling code here:
        //new code start
        //   String selectedCity = comboCityUpdate.getSelectedItem().toString();
        //  cityUpdateAction(selectedCity, "update");
        for (Map.Entry<String, ArrayList<String>> entry : map.entrySet()) {

            if (comboCityUpdate.getSelectedItem() != null) {

                if (comboCityUpdate.getSelectedItem().equals(entry.getKey())) {
                    ArrayList<String> list = entry.getValue();
                    communityComboUpdate.removeAllItems();

                    for (String community : list) {
                        //     comboCommunity.removeAllItems();
                        communityComboUpdate.addItem(community);
                    }

                }

            }

        }


    }//GEN-LAST:event_comboCityUpdateActionPerformed

    private void communityComboUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityComboUpdateActionPerformed


    }//GEN-LAST:event_communityComboUpdateActionPerformed

    private void textPatientIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textPatientIdKeyTyped
        // TODO add your handling code here:
        char value = evt.getKeyChar();
        if ((!Character.isDigit(value))) {
            evt.consume();
        }
    }//GEN-LAST:event_textPatientIdKeyTyped

    private void textDocNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textDocNameKeyTyped
        // TODO add your handling code here:
        char value = evt.getKeyChar();
        if ((!Character.isAlphabetic(value))) {
            evt.consume();
        }
    }//GEN-LAST:event_textDocNameKeyTyped

    private void buttonSavePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSavePatientActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblPersons.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please Select a row to add as a Patient");
            return;
        }
        byte chkPatientName = 0;   //Value 0 means the value passed is appropriate
        byte chkPatientID = 0;
        byte chkDoctorName = 0;
        try {
            if (textPatientName.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Error in provided Name Details");
                textPatientName.setText("");
                chkPatientName = 1;
            }
            if (textPatientId.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Error in provided patient ID Details");
                textPatientId.setText("");
                chkPatientID = 1;
            }
            if (textDocName.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Error in provided Doctor Name Details");
                textDocName.setText("");
                chkDoctorName = 1;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error in provided Details");
        }
        DefaultTableModel model = (DefaultTableModel) tblPersons.getModel();
        Person selectedPersonDetails = (Person) model.getValueAt(selectedRowIndex, 0);
        if (((chkPatientName == 0) && (chkPatientID == 0) && (chkDoctorName == 0))) {
            Patient pa = patientDirectory.addPatient();
            pa.setName(selectedPersonDetails.getName());
            pa.setAge(selectedPersonDetails.getAge());
            //pa.setContact(selectedPersonDetails.getAge());
            pa.setGender(selectedPersonDetails.getGender());
            pa.setCommunity(selectedPersonDetails.getCommunity());
            pa.setCity(selectedPersonDetails.getCity());
            pa.setHouse(selectedPersonDetails.getHouse());
            pa.setPatientId(Integer.parseInt(textPatientId.getText()));
            pa.setDoctorName(textDocName.getText());
            System.out.println(patientDirectory.getPatientDetails());
            JOptionPane.showMessageDialog(null, "Patient Details Added");
        }
    }

    private void btnDeletePersonInformationActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        //        int selectedRowIndex = tblPersonInformation.getSelectedRow();
        //        if (selectedRowIndex <0){
        //            JOptionPane.showMessageDialog(this, "Please Select a row to delete");
        //            return;
        //        }
        //        DefaultTableModel model = (DefaultTableModel) tblPersonInformation.getModel();
        //        Person selectedCarDetails = (Person)model.getValueAt(selectedRowIndex, 0);
        //        person.deletePersonDetails(selectedCarDetails);
        //        JOptionPane.showMessageDialog(this, "Person Details Deleted");
        //        populatePersonTable();

    }//GEN-LAST:event_buttonSavePatientActionPerformed

    private void buttonAddPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddPatientActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblPersons.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please Select a row to add as a Patient");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblPersons.getModel();
        Person selectedPersonDetails = (Person) model.getValueAt(selectedRowIndex, 0);
        textPatientName.setText(selectedPersonDetails.getName());

    }//GEN-LAST:event_buttonAddPatientActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboGender;
    private javax.swing.JComboBox<String> ComboPerGender;
    private javax.swing.JTabbedPane PersonTab;
    private javax.swing.JButton btnCreatePatient;
    private javax.swing.JButton btnPersonDelete;
    private javax.swing.JButton btnPersonUpdate;
    private javax.swing.JButton btnPersonView;
    private javax.swing.JButton buttonAddPatient;
    private javax.swing.JButton buttonSavePatient;
    private javax.swing.JComboBox<String> comboCity;
    private javax.swing.JComboBox<String> comboCityUpdate;
    private javax.swing.JComboBox<String> comboCommunity;
    private javax.swing.JComboBox<String> communityComboUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelName1;
    private javax.swing.JLabel labelName2;
    private javax.swing.JLabel labelName3;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblAge1;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblCreatePatient;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblGender1;
    private javax.swing.JLabel lblHouse;
    private javax.swing.JLabel lblMobile;
    private javax.swing.JLabel lblMobile1;
    private javax.swing.JLabel lblPatientName;
    private javax.swing.JLabel lblPatientName1;
    private javax.swing.JLabel lblPersonId;
    private javax.swing.JLabel lblPersonId1;
    private javax.swing.JLabel lblUpdateCity1;
    private javax.swing.JLabel lblUpdateCommunity;
    private javax.swing.JLabel lblUpdateHouse;
    private javax.swing.JTable tblPersons;
    private javax.swing.JTextField textDocName;
    private javax.swing.JTextField textPatientId;
    private javax.swing.JTextField textPatientName;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtHouse;
    private javax.swing.JTextField txtHouseUpdate;
    private javax.swing.JTextField txtMobile;
    private javax.swing.JTextField txtPerAge;
    private javax.swing.JTextField txtPerId;
    private javax.swing.JTextField txtPerMobile;
    private javax.swing.JTextField txtPerName;
    private javax.swing.JTextField txtPersonId;
    private javax.swing.JTextField txtPersonName;
    // End of variables declaration//GEN-END:variables

    private void populatePeopleTable() {

        DefaultTableModel model = (DefaultTableModel) tblPersons.getModel();

        model.setRowCount(0);

        for (Person p : personDirectory.getPersonDetails()) {
            Object[] row = new Object[10];
            row[0] = p;
            row[1] = p.getPersonId();
            row[2] = p.getAge();

            row[3] = p.getGender();
            row[4] = p.getMobile();
            row[5] = p.getCity().getCityName();
            row[6] = p.getCommunity().getCommunityName();
            row[7] = p.getHouse().getAddress();

            model.addRow(row);

        }

    }

    private void clearAllTextFields() {
        txtPerName.setText("");
        txtPerAge.setText("");
        txtPerId.setText("");
        txtPerMobile.setText("");
        ComboPerGender.setSelectedIndex(0);

        //txtPerAddress.setText("");
    }

    public void setHouseAllProperties() {

        for (Community community : cList) {

            ArrayList<String> HouseVal = new ArrayList<>();

            if (communityNameList.contains(community.getCommunityName())) {
                if (mapHouse.get(community.getCommunityName()) == null) {
                    HouseVal.add(community.getHouse().getAddress());
                    mapHouse.put(community.getCommunityName(), HouseVal);
                } else {

                    mapHouse.get(community.getCommunityName()).add(community.getHouse().getAddress());

                }

            }

        }
    }

    public void setCommunityAllProperties() {
        for (Community community : cList) {

            ArrayList<String> communityVal = new ArrayList<>();

            if (cityList.contains(community.getCity().getCityName())) {
                if (map.get(community.getCity().getCityName()) == null) {
                    communityVal.add(community.getCommunityName());
                    map.put(community.getCity().getCityName(), communityVal);
                } else {

                    map.get(community.getCity().getCityName()).add(community.getCommunityName());

                }

            }

        }
    }

    private void cityUpdateAction(String selectedCity, String type) {

        if (selectedCity.equals("Boston")) {
            if (type.equals("new")) {
                comboCommunity.removeAllItems();
                comboCommunity.addItem("Huntington Avenue");
                comboCommunity.addItem("Brookline");
            } else {
                communityComboUpdate.removeAllItems();
                communityComboUpdate.addItem("Huntington Avenue");
                communityComboUpdate.addItem("Brookline");

            }

        }
        if (selectedCity.equals("New York")) {
            if (type.equals("new")) {
                comboCommunity.removeAllItems();
                comboCommunity.addItem("Times Square");
                comboCommunity.addItem("Manhattan");

            } else {
                communityComboUpdate.removeAllItems();
                communityComboUpdate.addItem("Times Square");
                communityComboUpdate.addItem("Manhattan");

            }

        }

    }

//    private void communityUpdateAction(String selectedCommunity, String type) {
//            
//        if (selectedCommunity != null) {
//            if (type.equals("new")) {
//                if (selectedCommunity.equals("Huntington Avenue")) {
//                    comboHouse.removeAllItems();
//                    comboHouse.addItem("100");
//                    comboHouse.addItem("101");
//
//                }
//                if (selectedCommunity.equals("Brookline")) {
//                    comboHouse.removeAllItems();
//                    comboHouse.addItem("102");
//                    comboHouse.addItem("103");
//
//                }
//                if (selectedCommunity.equals("Times Square")) {
//                    comboHouse.removeAllItems();
//                    comboHouse.addItem("104");
//                    comboHouse.addItem("105");
//
//                }
//                if (selectedCommunity.equals("Manhattan")) {
//                    comboHouse.removeAllItems();
//                    comboHouse.addItem("106");
//                    comboHouse.addItem("107");
//
//                }
//            } else {
//                if (selectedCommunity.equals("Huntington Avenue")) {
//                    houseComboUpdate.removeAllItems();
//                    houseComboUpdate.addItem("100");
//                    houseComboUpdate.addItem("101");
//
//                }
//                if (selectedCommunity.equals("Brookline")) {
//                    houseComboUpdate.removeAllItems();
//                    houseComboUpdate.addItem("102");
//                    houseComboUpdate.addItem("103");
//
//                }
//                if (selectedCommunity.equals("Times Square")) {
//                    houseComboUpdate.removeAllItems();
//                    houseComboUpdate.addItem("104");
//                    houseComboUpdate.addItem("105");
//
//                }
//                if (selectedCommunity.equals("Manhattan")) {
//                    houseComboUpdate.removeAllItems();
//                    houseComboUpdate.addItem("106");
//                    houseComboUpdate.addItem("107");
//
//                }
//
//            }
//        }
//
//
//    }
}
